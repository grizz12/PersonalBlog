$width: 30  ;
$text: #000;
$bg: #fff;
$cursor-speed: 22; // characters per second
$duration: $width / $cursor-speed * 0.1s;
$cursor-duration: $duration / $width;
$cursor-wait-duration: 0.1s;
$cursor-wait-iteration: 2;
$paragraph-lengths: (35, 181, 120, 215);

@keyframes letters {
  // animation, go from left to right
  from {
      left: 0;
  }
  to {
      left: $width + ch;
  }
}

@keyframes lines {
    // go from top to bottom
    from {
        top: 0;
    }
    to {
        top: 100%;
    }
}

@keyframes cursor-type { 
  50% { 
    border-color: #000; 
  } 
}

@keyframes cursor-wait { 
  0% { 
    box-shadow: inset 2px 0 0 0 rgba(0, 0, 0, 0); 
  } 
  1% { 
    box-shadow: inset 2px 0 0 0 rgba(0, 0, 0, 1); 
  }
  40% { 
    box-shadow: inset 2px 0 0 0 rgba(0, 0, 0, 1); 
  }
}

.test {
  display: none;
  animation-name: cursor-wait;
  animation-duration: $cursor-wait-duration;
  animation-timing-function: ease;
  animation-iteration-count: 2;
  animation-fill-mode: backward;
  animation-delay:0s; 
  padding-left: 10px;
}

.type {
    position: relative;
    font-family: Consolas, Monaco, monospace; // must be monospace
    width: $width + ch;
    line-height: 1.2;
    word-break: break-all; // this has to be a predictable height and width to work
    overflow: hidden;

      // falls back to displaying static text
    @supports (width: 1ch) {
        &:before,
        &:after {
            box-sizing: border-box;
            content: '';
            position: absolute;
            z-index: 1;
            display: block;
            height: 1.2em;
            width: 100%;
            background-color: $bg; 
        }

        &:before {
            // cursor and first line mask
            border-left: 2px solid transparent;
            top: 100%;
            animation-name: letters, lines, cursor-type, cursor-wait;
            animation-fill-mode: both, both, both, backwards;
        }

        &:after {
            // mask for subsequent lines
            content: '';
            height: 100%;
            top: 100%;
            left: 0;
            margin-top: 1.2em;
        }
    }
}


$iterations: 1;
$total-delay: 0s;

@each $length in $paragraph-lengths {
  $this-characters: $length;
  $this-lines: ceil($this-characters / $width); 
  $this-selector: '.type';
  $this-delay: $total-delay;
  $this-type-delay: $this-delay + $cursor-wait-duration * $cursor-wait-iteration; 

  @for $i from 1 to $iterations {
    $this-selector: $this-selector + ' + .type';
  }
  
  #{$this-selector} {
     &:before {
       animation-duration: $duration, ($duration * $this-lines), $cursor-duration, $cursor-wait-duration;
       animation-timing-function: steps($width, end), steps($this-lines, end), step-end, ease-out;
       animation-iteration-count: $this-lines, 1, $this-characters, $cursor-wait-iteration;  
       animation-delay: $this-type-delay, $this-type-delay, $this-type-delay, $this-delay; 
    }

    &:after {
      animation: lines ($duration * $this-lines) steps($this-lines, end) 1;
      animation-fill-mode: both;
      animation-delay: $this-type-delay;
    }
  }
  $total-delay: $this-type-delay + ($this-characters / $cursor-speed);
  $iterations: $iterations + 1;  
}

